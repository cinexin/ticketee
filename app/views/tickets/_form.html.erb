<!-- what's this "multipart" attribute?
	I really don't know, but it's necessary by the form
	to actually upload the fields
-->
<%= form_for [@project, @ticket], html:{multipart: true} do |f| %>

	<% if @ticket.errors.any? %>
		<div id="error_explanation">
			<h2>
				<%= pluralize(@ticket.errors.count, "error") %> 
				prohibited this ticket from being saved:
			</h2>
			<ul>
				<% @ticket.errors.full_messages.each do |msg| %>
					<li><%= msg %></li>
				<% end %>
			</ul>
		</div>
	<% end %>

	<p>
		<%= f.label :title %><br />
		<%= f.text_field :title %>
	</p>

	<p>
		<%= f.label :description %><br />
		<%= f.text_area :description %>
	</p>

	<p>
		<%= f.label :tag_names, "Tags" %><br />
		<%= f.text_field :tag_names %>
	</p>

	<!-- this is the way we can generate n fields for a set of attributes
		in this case, uploaded files...-->
	<% number = 0 %>
	<!-- the argument for the "fields_for" form tells Rails
		the name of the nested fields we want to iterate
		Note that this only works for nested fields in the model
	-->
	<div id = 'files'>
		<!-- see "app/views/files/_form.html.erb" for details -->
		<!-- when you pass the "locals" option to "render", you can set local variables that can be used in the partial-->
		<%= render partial: "files/form", locals: {number: params[:number].to_i} %>
		<!--
		Some explanation about the "link_to Add another file" arguments:

		 ":remote=>true" tells Rails you want we want a link that uses
		Javascript to make a backgrouynd "asynchronous" request, the request uses the JavaScript provided by "jquery-ujs.js" (that comes with the "jquery-rails" gem), this request responds with some content, wich is dealt by ":update" and ":position" options

		":update=>files" tells Rails to tell the JavaScript that handles the response that you want to insert the content from the background request into the element with the the "id" attribute "files"

		":position=>after" tells that you want to insert the above commented content after any other content in the element, wich in this case means, for instance, that the second file selected will be displayed after the first inserted file
		-->
		<!-- link_to "Add another file", new_file_path, :remote=>true, :update=>"files", :position=>"after" %> -->
		<!-- we replace the above "link_to" statement to this: -->
		<!-- see "app/assets/javascripts/tickets.js.cofee" for details -->
		<%= link_to "Add another file", 'javascript:', id: "add_another_file" %>
	</div>
	

	<%= f.submit "Save" %>
<%end%>